on:
  workflow_call:
    inputs:
      cache-key:
        required: true
        type: string
      cache-path:
        required: true
        type: string
      valid-cache:
        required: true
        type: boolean
      os:
        required: true
        type: string
      arch:
        required: true
        type: string
      build-deps-only:
        required: false
        type: boolean

jobs:
  build_deps:
    name: Build Deps
    if: inputs.build-deps-only || inputs.valid-cache != true
    runs-on: ${{ (inputs.os == 'windows-latest' && 'windows-latest') || (inputs.os == 'macos-14' && 'macos-14') || 'ubuntu-latest' }}
    env:
      date:
    steps:

      # Setup the environment
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: 'true'

      - name: load cached deps
        uses: actions/cache@v4
        with:
          path: ${{ inputs.cache-path }}
          key: ${{ inputs.cache-key }}

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.28.0"  # use most recent 3.28.x version

      - name: setup dev on Windows
        if: inputs.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Get the date on Ubuntu and macOS
        if: inputs.os != 'windows-latest'
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash

      - name: Get the date on Windows
        if: inputs.os == 'windows-latest'
        run: echo "date=$(Get-Date -Format 'yyyyMMdd')" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
        shell: pwsh


      # Build Dependencies
      - name: Build on Windows
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: |
            choco install strawberryperl
            .\build_release_vs2022.bat deps
            .\build_release_vs2022.bat pack
            cd ${{ github.workspace }}/deps/build

      - name: Build on Mac ${{ inputs.arch }}
        if: inputs.os == 'macos-14'
        working-directory: ${{ github.workspace }}
        run: |
            brew install automake texinfo libtool
            brew list
            brew uninstall --ignore-dependencies zstd
            ./build_release_macos.sh -dx -a universal -t 10.15 -1
            for arch in arm64 x86_64; do
                (cd "${{ github.workspace }}/deps/build/${arch}" && \
                find . -mindepth 1 -maxdepth 1 ! -name 'OrcaSlicer_dep' -exec rm -rf {} +)
            done
            brew install zstd


      - name: Install Ubuntu Build Dependencies
        if: inputs.os == 'ubuntu-20.04' || inputs.os == 'ubuntu-24.04'
        working-directory: ${{ github.workspace }}
        env:
          apt-cmd: ${{ (inputs.os == 'ubuntu-20.04' && 'apt-fast') || (inputs.os == 'ubuntu-24.04' && 'sudo apt-get') || '' }}
          webkit-ver: ${{ (inputs.os == 'ubuntu-20.04' && '4.0') || (inputs.os == 'ubuntu-24.04' && '4.1') || '' }}
        run: |
            ${{ env.apt-cmd }} update
            ${{ env.apt-cmd }} install -y cmake git g++ build-essential libgl1-mesa-dev m4 \
            libwayland-dev libxkbcommon-dev wayland-protocols extra-cmake-modules pkgconf \
            libglu1-mesa-dev libcairo2-dev libgtk-3-dev libsoup2.4-dev libwebkit2gtk-${{ env.webkit-ver }}-dev \
            libgstreamer1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-bad libosmesa6-dev wget sudo autoconf curl libunwind-dev texinfo

      - name: Build on Ubuntu
        if: inputs.os == 'ubuntu-20.04' || inputs.os == 'ubuntu-24.04'
        working-directory: ${{ github.workspace }}
        run: |
            mkdir -p ${{ github.workspace }}/deps/build
            mkdir -p ${{ github.workspace }}/deps/build/destdir
            sudo ./BuildLinux.sh -ur
            sudo chown $USER -R ./
            ./BuildLinux.sh -dr
            cd deps/build
            tar -czvf OrcaSlicer_dep_ubuntu_$(date +"%Y%m%d").tar.gz destdir

      # --- Raspberry Pi OS (via QEMU) Dependency Build ---

      - name: Install build dependencies for Raspberry Pi OS (QEMU)
        if: inputs.os == 'rpi-os-arm64'
        working-directory: ${{ github.workspace }}
        uses: pguyot/arm-runner-action@v2
        with:
          base_image: raspios_lite_arm64:latest # Ensure this matches your target
          commands: |
            echo "--- Installing base dependencies ---"
            sudo apt-get update -y
            sudo apt-get install -y \
              autoconf build-essential cmake curl eglexternalplatform-dev \
              extra-cmake-modules file git g++ libcairo2-dev libcurl4-openssl-dev \
              libdbus-1-dev libglew-dev libglu1-mesa-dev libgstreamer1.0-dev \
              libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
              gstreamer1.0-plugins-bad libgtk-3-dev libmspack-dev libosmesa6-dev \
              libsecret-1-dev libsoup2.4-dev libssl-dev libudev-dev libunwind-dev \
              libwayland-dev libwebkit2gtk-4.1-dev libxkbcommon-dev locales \
              locales-all m4 pkgconf sudo texinfo wayland-protocols wget libfuse2t64

      - name: Build for Raspberry Pi OS (QEMU)
        if: inputs.os == 'rpi-os-arm64'
        working-directory: ${{ github.workspace }}
        uses: pguyot/arm-runner-action@v2
        with:
          base_image: raspios_lite_arm64:latest # Ensure this matches your target
          commands: |
            echo "--- Building RPi Dependencies in QEMU ---"
            echo "Target cache path structure on host: ${{ inputs.cache-path }}"
            echo "Running as user: $(whoami) in $(pwd)"

            echo "--- Running BuildLinux.sh to build source dependencies ---"
            mkdir -p ${{ github.workspace }}/deps/build
            mkdir -p ${{ github.workspace }}/deps/build/destdir
            sudo ./BuildLinux.sh -ur
            sudo chown $USER -R ./
            ./BuildLinux.sh -dr
            cd deps/build
            tar -czvf OrcaSlicer_dep_ubuntu_$(date +"%Y%m%d").tar.gz destdir

            echo "--- RPi Dependencies Build in QEMU Finished ---"

      # Upload Artifacts
      # - name: Upload Mac ${{ inputs.arch }} artifacts
      #   if: inputs.os == 'macos-14'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: OrcaSlicer_dep_mac_${{ env.date }}
      #     path: ${{ github.workspace }}/deps/build/OrcaSlicer_dep*.tar.gz

      - name: Upload RPi OS arm64 deps artifacts
        if: inputs.os == 'rpi-os-arm64' && inputs.build-deps-only
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_dep_rpi_os_arm64_${{ env.date }}
          path: ${{ inputs.cache-path }}

      - name: Upload Windows artifacts
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_dep_win64_${{ env.date }}
          path: ${{ github.workspace }}/deps/build/OrcaSlicer_dep*.zip

      - name: Upload Ubuntu artifacts
        if: ${{ ! env.ACT && inputs.os == 'ubuntu-20.04' || inputs.os == 'ubuntu-24.04' }}
        env:
          ubuntu-ver: ${{ (inputs.os == 'ubuntu-20.04' && '2004') || (inputs.os == 'ubuntu-24.04' && '2404') || '' }}
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_dep_ubuntu_${{ env.ubuntu-ver }}_${{ env.date }}
          path: ${{ github.workspace }}/deps/build/OrcaSlicer_dep_ubuntu_*.tar.gz

  build_orca:
    name: Build OrcaSlicer
    needs: [build_deps]
    if: ${{ !cancelled() && !inputs.build-deps-only && (inputs.valid-cache == true && needs.build_deps.result == 'skipped') || (inputs.valid-cache != true && success()) }}
    uses: ./.github/workflows/build_orca.yml
    with:
      cache-key: ${{ inputs.cache-key }}
      cache-path: ${{ inputs.cache-path }}
      os: ${{ inputs.os }}
      arch: ${{ inputs.arch }}
    secrets: inherit
